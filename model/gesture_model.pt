!pip install torch torchvision
import matplotlib.pyplot as plt
import numpy as np
import cv2
import os
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader
from torchvision import transforms, models, datasets
from PIL import Image
from sklearn.model_selection import train_test_split
!git clone https://github.com/tarashakhurana/SkyScroll

!rm -rf SkyScroll/.git
# code to delete folders
import shutil
import os

output_base = '/content/GEI_Output'

# Delete the folder if it exists
if os.path.exists(output_base):
    shutil.rmtree(output_base)
    print(f"Deleted existing folder: {output_base}")
else:
    print(f"Folder does not exist: {output_base}")

def generate_gei_weighted(video_path, threshold=0.1,  max_brightness=0.85, min_brightness=0.2, decay_power=3.0 ):
    cap = cv2.VideoCapture(video_path)

    if not cap.isOpened():
        print(f"Error: Could not open video file {video_path}")
        return None

    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))

    result_image = np.zeros((frame_height, frame_width), dtype=np.float32)
    has_written = np.zeros_like(result_image, dtype=bool)

    frame_idx = 0
    while True:
        ret, frame = cap.read()
        if not ret:
            break

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        gray = gray.astype(np.float32) / 255.0

        # Detect new hand presence
        mask = (gray > threshold) & (~has_written)

        # Sharper brightness decay (exponential-like)
        progress = frame_idx / max(total_frames - 1, 1)
        decay = (1.0 - progress) ** decay_power  # faster dropoff
        brightness = min_brightness + (max_brightness - min_brightness) * decay

        result_image[mask] = brightness
        has_written[mask] = True

        frame_idx += 1

    cap.release()

    # Display image
    result_display = (result_image * 255).astype(np.uint8)

    # plt.imshow(result_display, cmap='gray')
    # # plt.title("Fast Fading Motion Trail (Early Emphasis, Sharp Drop)")
    # plt.axis('off')
    # plt.show()

    return result_display

#Generate and process all files and sort them under Processed_videos

# Paths
input_folder = '/content/SkyScroll'
output_folder = '/content/GEI_Output'
os.makedirs(output_folder, exist_ok=True)

def generate_gei(video_path):
    cap = cv2.VideoCapture(video_path)
    frames = []

    while True:
        ret, frame = cap.read()
        if not ret:
            break
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        gray = gray.astype(np.float32)
        frames.append(gray)

    cap.release()
    if not frames:
        return None

    frames_np = np.stack(frames, axis=0)
    gei = np.mean(frames_np, axis=0)
    gei = cv2.normalize(gei, None, 0, 255, cv2.NORM_MINMAX)
    return gei.astype(np.uint8)

for filename in os.listdir(input_folder):
    file_path = os.path.join(input_folder, filename)

    if os.path.isfile(file_path) and filename.lower().endswith(('.mp4', '.avi', '.mov', '.mkv')):
        parts = filename.split('_')
        class_label = '_'.join(parts[:2]) if len(parts) >= 2 else parts[0]

        class_folder = os.path.join(output_folder, class_label)
        os.makedirs(class_folder, exist_ok=True)

        gei_image = generate_gei_weighted(file_path)
        if gei_image is not None:
            base_name = os.path.splitext(filename)[0]
            output_filename = f"processed_{base_name}.png"
            output_path = os.path.join(class_folder, output_filename)
            cv2.imwrite(output_path, gei_image)
            # print(f"✅ Saved GEI: {output_path}")
        # else:
            # print(f"⚠️ Failed to generate GEI for {filename}")

